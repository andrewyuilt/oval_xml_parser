Задания:

1) Провести частичный анализ OVAL файла от компании RHEL
(https://www.redhat.com/security/data/oval/v2/RHEL8/rhel-8.oval.xml.bz2) на
первых 3 уязвимостях (патчах). Определить набор объектов, из которых он
строится. Понять основную логику "работы" данного формата.
2) Описать текстом объекты, которые были найдены и для чего они
используются. (Не более 2-3 фраз по каждому объекту).
3) В рамках каждого определения уязвимости, есть критерии по ее выявлению:
какие из критериев на ваш взгляд лишние?
4) Предложить и кратко описать свой вариант по упрощению формата для
описания уязвимости вместе с проверками.
5) После выполненного в предыдущей пунктах анализа, необходимо
разработать приложение на языке Python, которое произведет разбор
(парсинг) OVAL-файла (достаточно сделать только первые 3 и связанными с
ними объекты) и преобразует его в упрощенный формат

Решения:

1) Частичный анализ OVAL-файла произведен на первых 3х уязвимостях.
Определен набор объектов, отражающих структуру файла и понята логика работа данного формата.
2) oval_definitions - корневой элемент OVAL
generator - информация о ПО, сгенерировавшем файл
definitions - блок, содержащий уязвимости или патчи
definition - конкретная уязвимость/патч, содержащее описание обновления,
подверженные системы, ссылки на обновления и CVE, а также критерии для выявления уязвимости
criteria - блоки критерии, используемые для определения того, применима ли уязвимость к системе,
путем использования логических операторов OR, AND и дочерних элементов criterion
criterion - отдельная критерия проверки со ссылкой на тесты для проверки
tests - группа тестов для критерий проверки, содержащее в себе условия для прохождения теста,
элементы проверки, а также ссылки на объекты и условия для тестирования
объекты для тестирования(objects) - элементы содержащие в себе пакет RPM или группу пакетов для тестирования
условия для тестирования(states) - условия для сравнения информации о пакете для определения результата теста
local_variable - элемент, содержащий локальные переменные для использования/хранения при выполнении тестов
3) На мой взгляд, в текущем определении уязвимостей/патчей нет лишних критериев, т.к. каждый из них выполняет уникальную проверку, специфичную для данной уязвимости. 
Хотя некоторые критерии кажутся похожими, они могут иметь различное значение в контексте разных проверок. 
4) Предлагаю вариант с преобразованием XML в JSON формату. В его структуре будут содержаться основные объекты - definitions, tests, objects, states, variables,
а также их некоторые дочерние элементы и связанные элементы. 
5) Парсер предоставлен в файле simple_format.py. Результат преобразования(первые 3 definition) предоставлены в файле output.json